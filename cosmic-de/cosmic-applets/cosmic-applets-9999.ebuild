# Copyright 2023 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Auto-Generated by cargo-ebuild 0.5.4

EAPI=8

CARGO_OPTIONAL=1
inherit cargo

DESCRIPTION="applets for COSMIC DE"
HOMEPAGE="https://github.com/pop-os/cosmic-applets"

if [ "${PV}" == "9999" ] ; then
	inherit git-r3
	EGIT_REPO_URI="${HOMEPAGE}"
else
	# TODO this is not really working atm
	SRC_URI="https://github.com/pop-os/${PN}/archive/refs/tags/${MY_PV}.tar.gz -> ${P}.tar.gz
				$(cargo_crate_uris)
	"
fi

# License set may be more restrictive as OR is not respected
# use cargo-license for a more accurate license picture
LICENSE="0BSD Apache-2.0 Apache-2.0-with-LLVM-exceptions Artistic-2 BSD BSD-2 Boost-1.0 CC0-1.0 GPL-3 GPL-3+ ISC MIT MPL-2.0 OFL-1.1 Unicode-DFS-2016 Unlicense ZLIB"
SLOT="0"
KEYWORDS="~amd64"
IUSE="max-opt"

# As per https://raw.githubusercontent.com/pop-os/cosmic-applets/master/debian/control
DEPEND="
cosmic-de/cosmic-icons
"
RDEPEND="${DEPEND}"
BDEPEND="
dev-build/just
dev-libs/wayland
media-libs/libglvnd
media-libs/libpulse
sys-apps/dbus
virtual/pkgconfig
>=virtual/rust-1.75.0
virtual/libudev
x11-libs/libxkbcommon
"

REQUIRED_USE="debug? ( !max-opt )
max-opt? ( !debug )"

# rust does not use *FLAGS from make.conf, silence portage warning
# update with proper path to binaries this crate installs, omit leading /
QA_FLAGS_IGNORED="usr/bin/cosmic-applet-audio
usr/bin/cosmic-applet-battery
usr/bin/cosmic-applet-bluetooth
usr/bin/cosmic-applet-graphics
usr/bin/cosmic-applet-network
usr/bin/cosmic-applet-notifications
usr/bin/cosmic-applet-power
usr/bin/cosmic-applet-time
usr/bin/cosmic-applet-workspaces
usr/bin/cosmic-app-list
usr/bin/cosmic-panel-button
"

src_unpack() {
	if [[ "${PV}" == *9999* ]]; then
		git-r3_src_unpack
		cargo_live_src_unpack
	else
		cargo_src_unpack
	fi
}

src_prepare() {
	default
	if use max-opt ; then
		{
		cat <<'EOF'

[profile.release-maximum-optimization]
inherits = "release"
debug = "line-tables-only"
debug-assertions = false
codegen-units = 1
incremental = false
lto = "thin"
opt-level = 3
overflow-checks = false
panic = "unwind"
EOF
		} >> Cargo.toml
	fi
}

src_compile() {
	if use max-opt ; then
		cargo build --profile release-maximum-optimization || die
	else
		if use debug; then
			just build-debug || die
		else
			just build-release || die
		fi
	fi
}

src_install() {
	profile_name="release"
	use debug && profile_name="debug"
	use max-opt && profile_name="release-maximum-optimization"
	just --set rootdir "${D}" --set target "${profile_name}" install || die
}
