# Copyright 2023 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Auto-Generated by cargo-ebuild 0.5.4

EAPI=8

CRATES="
"

inherit cargo

DESCRIPTION="A cross-platform GUI library inspired by Elm"
HOMEPAGE="https://github.com/pop-os/iced"
MY_PV="v${PV}"

if [ "${PV}" == "9999" ] ; then
	inherit git-r3
	EGIT_REPO_URI="${HOMEPAGE}"
else
	SRC_URI="https://github.com/pop-os/${PN}/archive/refs/tags/${MY_PV}.tar.gz -> ${P}.tar.gz
				$(cargo_crate_uris)
"
fi

# License set may be more restrictive as OR is not respected
# use cargo-license for a more accurate license picture
LICENSE="0BSD Apache-2.0 Apache-2.0-with-LLVM-exceptions BSD BSD-2 Boost-1.0 CC0-1.0 ISC MIT MPL-2.0 OFL-1.1 Unicode-DFS-2016 Unlicense ZLIB"
SLOT="0"
KEYWORDS="~amd64"
IUSE="+async-std +accessibility canvas debug default-system-font iced-glow iced-smol iced-softbuffer +iced-wgpu +image lazy +palette qrcode shell-glutin shell-sctk shell-wayland +shell-winit +svg system tokio web-color"
REQUIRED_USE="
	iced-wgpu? ( !iced-glow !iced-softbuffer )
	iced-softbuffer? ( !iced-wgpu !iced-glow )
	iced-glow? ( !iced-wgpu !iced-softbuffer )
	shell-glutin? ( !shell-wayland !shell-winit !iced-softbuffer !iced-wgpu )
	shell-sctk? ( !shell-glutin !shell-winit )
	shell-wayland? ( !shell-glutin !shell-winit )
	shell-winit? ( !shell-wayland !shell-glutin )
"

DEPEND=""
RDEPEND="${DEPEND}"
BDEPEND=">=virtual/rust-1.75.0"

# rust does not use *FLAGS from make.conf, silence portage warning
# update with proper path to binaries this crate installs, omit leading /
QA_FLAGS_IGNORED="usr/bin/${PN}"

src_unpack() {
	if [[ "${PV}" == *9999* ]]; then
		git-r3_src_unpack
		cargo_live_src_unpack
	else
		cargo_src_unpack
	fi
}

src_configure() {
	local myfeatures=(
		$(usev async-std)
		$(usev canvas)
		$(usev debug)
		$(usev image)
		$(usev lazy)
		$(usev palette)
		$(usev svg)
		$(usev system)
		$(usev tokio)
		$(usev web-color)
	)
	use accessibility && myfeatures+=("a11y")
	use default-system-font && myfeatures+=("default_system_font")
	use iced-glow && myfeatures+=("glow")
	use iced-smol && myfeatures+=("smol")
	use iced-softbuffer && myfeatures+=("softbuffer")
	use iced-wgpu && myfeatures+=("wgpu")
	use qrcode && myfeatures+=("qr_code")
	use shell-glutin && myfeatures+=("glutin")
	use shell-wayland && myfeatures+=("wayland")
	use shell-winit && myfeatures+=("winit")

	cargo_src_configure --no-default-features
}

# compile and test are inlined because we're using
# "cargo rustc" vs "cargo build"
# this allows us to override --release, and pass
# -C prefer-dynamic=on
src_compile() {
	[[ ${_CARGO_GEN_CONFIG_HAS_RUN} ]] || \
		die "FATAL: please call cargo_gen_config before using ${FUNCNAME}"

	filter-lto
	tc-export AR CC CXX PKG_CONFIG

	set -- cargo rustc $(usex debug "" "--profile release-opt") --crate-type dylib "${ECARGO_ARGS[@]}" -- -C prefer-dynamic=on
	einfo "${@}"
	"${@}" || die "cargo build failed"
}

cargo_src_test() {
	debug-print-function "${FUNCNAME}" "$@"

	[[ ${_CARGO_GEN_CONFIG_HAS_RUN} ]] || \
		die "FATAL: please call cargo_gen_config before using ${FUNCNAME}"

	set -- cargo test --lib $(usex debug "" "--profile release-opt") "${ECARGO_ARGS[@]}" "$@"
	einfo "${@}"
	"${@}" || die "cargo test failed"
}

src_install() {
	if use debug ; then
		dolib.so target/debug/libiced.so
	else
		dolib.so target/release-opt/libiced.so
	fi
}
